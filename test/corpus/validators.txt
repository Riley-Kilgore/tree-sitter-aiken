================================================================================
Vesting Validator
================================================================================

validator {
  fn vesting(datum: Datum, _redeemer: Void, ctx: ScriptContext) {
    // In principle, scripts can be used for different purpose (e.g. minting
    // assets). Here we make sure it's only used when 'spending' from a eUTxO
    when ctx.purpose is {
      Spend(_) ->
        or {
          must_be_signed_by(ctx.transaction, datum.owner),
          and {
            must_be_signed_by(ctx.transaction, datum.beneficiary),
            must_start_after(ctx.transaction.validity_range, datum.lock_until),
          },
        }
      _ -> False
    }
  }
}

--------------------------------------------------------------------------------

(source_file
      (validator
        (expression
          (function
            (identifier)
            (function_arguments
              (function_argument
                (identifier)
                (type_definition
                  (type_identifier)))
              (function_argument
                (identifier)
                (type_definition
                  (type_identifier)))
              (function_argument
                (identifier)
                (type_definition
                  (type_identifier))))
            (expression
              (any_comment
                (comment)))
            (expression
              (any_comment
                (comment)))
            (expression
              (when
                (expression
                  (field_access
                    (identifier)
                    (identifier)))
                (when_case
                  (match_pattern
                    (type_identifier)
                    (match_pattern_argument
                      (discard)))
                  (expression
                    (logical_op_chain
                      (or_chain
                        (expression
                          (call
                            (identifier)
                            (call_arguments
                              (expression
                                (field_access
                                  (identifier)
                                  (identifier)))
                              (expression
                                (field_access
                                  (identifier)
                                  (identifier))))))
                        (expression
                          (logical_op_chain
                            (and_chain
                              (expression
                                (call
                                  (identifier)
                                  (call_arguments
                                    (expression
                                      (field_access
                                        (identifier)
                                        (identifier)))
                                    (expression
                                      (field_access
                                        (identifier)
                                        (identifier))))))
                              (expression
                                (call
                                  (identifier)
                                  (call_arguments
                                    (expression
                                      (field_access
                                        (identifier)
                                        (field_access
                                          (identifier)
                                          (identifier))))
                                    (expression
                                      (field_access
                                        (identifier)
                                        (identifier)))))))))))))
                (when_case
                  (discard)
                  (expression
                    (match_pattern
                      (type_identifier))))))))))